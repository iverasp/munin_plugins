#!/usr/bin/perl -w
# -*- perl -*-
# vim: ft=perl

=head1 NAME

snmp__sensors_fsc_bx_fan - Plugin to fetch RAID data from
IBM ServeRAID using SNMP

=head1 LICENSE

goes here

=head1 AUTHOR

Copyright (C) 2015 Iver Egge

=head1 MAGIC MARKERS

 #%# family=snmpauto
 #%# capabilities=snmpconf

=cut

use strict;

use Net::SNMP qw(oid_lex_sort);
use Munin::Plugin::SNMP;

# The OIDs we're after
my $raidBase = '1.3.6.1.4.1.795.14.1';

# Subtables
my $arraysBase = '1.3.6.1.4.1.795.14.1.1000.1.1';

# Magic values
my $arrayState_unknown = 1;
my $arrayState_other = 2;
my $arrayState_optimal = 3;
my $arrayState_quickInited = 4;
my $arrayState_impacted = 5;
my $arrayState_degraded = 6;
my $arrayState_failed = 7;
my $arrayState_compacted = 8;

my $arrayStatus_unknown = 1;
my $arrayStatus_other = 2;
my $arrayStatus_okey = 3;
my $arrayStatus_warning = 4;
my $arrayStatus_failure = 5;

if (defined $ARGV[0] and $ARGV[0] eq 'snmpconf') {
    print "require $raidBase.\n";
    exit 0;
}

my ($session, $error) = Munin::Plugin::SNMP->session();

if ($error) {
    die "# Error: $error\n";
}

my $arrays = $session->get_hash(
    -baseoid    => $arraysBase,
    -cols       => {
        1 => 'index',
        2 => 'name',
        11 => 'status',
        12 => 'state',
        },
    ), or die $session->error();

if (defined $ARGV[0] and $ARGV[0] eq 'config') {
    my ($host) = Munin::Plugin::SNMP->config_session();
    print "host_name $host\n" unless $host eq 'localhost';
    print <<EOM;
graph_title RAID Arrays
graph_args -l 0
graph_vlabel State and status
graph_category disk
graph_info This graph shows the statuses of the RAID arrays on the host
EOM

    for my $array (keys %$arrays) {
        my $id = get_id($array);
        my $idNumber = get_id_number($array);
        print "$id"."_state.label State, array $idNumber\n";
        print "$id"."_status.label Status, array $idNumber\n";
        print "$id"."_state.warning $arrayState_degraded\n";
        print "$id"."_status.warning $arrayStatus_warning\n";
        print "$id"."_state.critical $arrayState_failed\n";
        print "$id"."_status.critical $arrayStatus_failure\n";
    }

    exit 0;
} else {
    print get_id($_), '_status.value ', $arrays->{$_}{status}, "\n"
        for keys %$arrays;
    print get_id($_), '_state.value ', $arrays->{$_}{state}, "\n"
        for keys %$arrays;
}

sub get_id {
    (my $id = shift) =~ tr/\./_/;
    return 'array'.$id;
}

sub get_id_number {
    (my $id = shift) =~ tr/\./_/;
    return $id;
}
