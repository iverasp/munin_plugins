#!/usr/bin/perl -w
# -*- perl -*-
# vim: ft=perl

=head1 NAME

snmp__sensors_fsc_bx_fan - Plugin to fetch RAID data from
IBM RaidMan using SNMP

=head1 LICENSE

This program is free software; you can redistribute it and/or modify
it under the terms of the GNU General Public License as published by
the Free Software Foundation; version 2 dated June, 1991.

This program is distributed in the hope that it will be useful, but
WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
General Public License for more details.

You should have received a copy of the GNU General Public License
along with this program; if not, write to the Free Software
Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA
02110-1301 USA.

=head1 AUTHOR

Copyright (C) 2015 Iver Egge

=head1 MAGIC MARKERS

 #%# family=snmpauto
 #%# capabilities=snmpconf

=cut

use strict;

use Net::SNMP qw(oid_lex_sort);
use Munin::Plugin::SNMP;

# The OIDs we're after
my $fanBase = '1.3.6.1.4.1.7244.1.1.1.3.3.1.1';
my $raidBase = '.1.3.6.1.4.1.795.14.1';

# Subtables
my $ausStorageDeviceSmartStatus = '.410.1.1.8';
my $ausArrayStatus = '.1000.1.1.11';
my $ausArrayState = '.1000.1.1.12';

my $fanNumber       = 1;
my $fanStatus       = 2;
my $fanDesignation  = 3;
my $fanCurrentSpeed = 4;
my $fanMaximumSpeed = 5;

# Magic values
my $arrayState_unknown = 1;
my $arrayState_other = 2;
my $arrayState_optimal = 3;
my $arrayState_quickInited = 4;
my $arrayState_impacted = 5;
myÂ $arrayState_degraded = 6;
my $arrayState_failed = 7;
my $arrayState_compacted = 8;

my $smartStatus_unknown = 1;
my $smartStatus_notSupported = 2;
my $smartStatus_notEnabled = 3;
my $smartStatus_okey = 4;
my $smartStatus_errorPredicted = 5;

my $arrayStatus_unknown = 1;
my $arrayStatus_other = 2;
my $arrayStatus_okey = 3;
my $arrayStatus_warning = 4;
my $arrayStatus_failure = 5;

my $fanUnknown = 1;
my $fanDisabled = 2;
my $fanUnavailable = 99;

if (defined $ARGV[0] and $ARGV[0] eq 'snmpconf') {
    print "require $raidBase.\n";
    # Require known, enabled and available fans
    print "require $raidBase.$ausArrayStatus. ^[3-9]|[1-8][0-9]|9[0-8]\$\n";

    exit 0;
}


my ($session, $error) = Munin::Plugin::SNMP->session();

if ($error) {
    die "# Error: $error\n";
}

my $arrays =  $session->get_hash(-baseoid => $raidBase,
				-cols    => { $fanNumber             => 'number',
					      $fanStatus             => 'status',
					      $fanCurrentSpeed       => 'value',
					      $fanMaximumSpeed       => 'warning',
					      $fanDesignation        => 'label',
					    },
			       ) or die $session->error();

for my $key (keys %$fans) {
    my $fan = $fans->{$key};
    # Delete sensors with unknown, disabled or unavailable status
    delete $fans->{$key}
      if $fan->{status} == $fanUnknown ||
	$fan->{status} == $fanDisabled ||
	$fan->{status} == $fanUnavailable;
}

if (defined $ARGV[0] and $ARGV[0] eq 'config') {
    print <<EOM;
graph_title Fans
graph_args -l 0
graph_vlabel RPM
graph_category sensors
EOM
    print 'graph_order ', join(' ', map { get_id($_) } oid_lex_sort keys %$fans), "\n";
    print 'host_name ', $session->hostname(), "\n"
      unless $session->hostname eq 'localhost';
      
    for my $fan (keys %$fans) {
	my $id = get_id($fan);
	for my $key (qw(label warning)) {
	    print "$id.$key $fans->{$fan}{$key}\n";
	}
	print "$id.type GAUGE\n";
    }
} else {
    print get_id($_), '.value ', $fans->{$_}{value}, "\n"
      for keys %$fans;
}

sub get_id {
    (my $id = shift) =~ tr/\./_/;
    return 'fan'.$id;
}
